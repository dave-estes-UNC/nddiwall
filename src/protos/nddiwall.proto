syntax = "proto3";

package nddiwall;

service NddiWall {
  rpc Initialize (InitializeRequest) returns (StatusReply) {}
  rpc DisplayWidth (DisplayWidthRequest) returns (DisplayWidthReply) {}
  rpc DisplayHeight (DisplayHeightRequest) returns (DisplayHeightReply) {}
  rpc NumCoefficientPlanes (NumCoefficientPlanesRequest) returns (NumCoefficientPlanesReply) {}
  rpc PutPixel (PutPixelRequest) returns (StatusReply) {}
  rpc FillPixel (FillPixelRequest) returns (StatusReply) {}
  rpc CopyPixelStrip (CopyPixelStripRequest) returns (StatusReply) {}
  rpc CopyPixels (CopyPixelsRequest) returns (StatusReply) {}
  rpc CopyPixelTiles (CopyPixelTilesRequest) returns (StatusReply) {}
  rpc PutCoefficientMatrix (PutCoefficientMatrixRequest) returns (StatusReply) {}
  rpc FillCoefficientMatrix (FillCoefficientMatrixRequest) returns (StatusReply) {}
  rpc FillCoefficient (FillCoefficientRequest) returns (StatusReply) {}
  rpc FillScaler (FillScalerRequest) returns (StatusReply) {}
  rpc GetFullScaler (GetFullScalerRequest) returns (GetFullScalerReply) {}
  rpc SetFullScaler (SetFullScalerRequest) returns (StatusReply) {}
  rpc UpdateInputVector (UpdateInputVectorRequest) returns (StatusReply) {}
}

//
// Requests
//
message InitializeRequest {
  repeated uint32 frameVolumeDimensionalSizes = 1;
  uint32 displayWidth = 2;
  uint32 displayHeight = 3;
  uint32 numCoefficientPlanes = 4;
  uint32 inputVectorSize = 5;
}

message DisplayWidthRequest {
}

message DisplayHeightRequest {
}

message NumCoefficientPlanesRequest {
}

message CopyPixelStripRequest {
  repeated uint32 pixels = 1;
  repeated uint32 start = 2;
  repeated uint32 end = 3;
}

message CopyPixelsRequest {
  repeated uint32 pixels = 1;
  repeated uint32 start = 2;
  repeated uint32 end = 3;
}

message CopyPixelTilesRequest {
  repeated uint32 pixels = 1;
  repeated uint32 starts = 2;
  repeated uint32 size = 3;
}

message PutPixelRequest {
  uint32 pixel = 1;
  repeated uint32 location = 2;
}

message FillPixelRequest {
  uint32 pixel = 1;
  repeated uint32 start = 2;
  repeated uint32 end = 3;
}

message PutCoefficientMatrixRequest {
  repeated int32 coefficientMatrix = 1;
  repeated uint32 location = 2;
}

message FillCoefficientMatrixRequest {
  repeated int32 coefficientMatrix = 1;
  repeated uint32 start = 2;
  repeated uint32 end = 3;
}

message FillCoefficientRequest {
  int32 coefficient = 1;
  uint32 row = 2;
  uint32 col = 3;
  repeated uint32 start = 4;
  repeated uint32 end = 5;
}

message FillScalerRequest {
  uint64 scaler = 1;
  repeated uint32 start = 2;
  repeated uint32 end = 3;
}

message GetFullScalerRequest {
}

message SetFullScalerRequest {
  uint32 fullScaler = 1;
}

message UpdateInputVectorRequest {
  repeated uint32 input = 1;
}

//
// Replies
//
message StatusReply {
  enum Status {
    OK = 0;
    NOT_OK = 1;
  }
  Status status = 1;
}

message DisplayWidthReply {
  uint32 width = 1;
}

message DisplayHeightReply {
  uint32 height = 1;
}

message NumCoefficientPlanesReply {
  uint32 planes = 1;
}

message GetFullScalerReply {
  uint32 fullScaler = 1;
}
