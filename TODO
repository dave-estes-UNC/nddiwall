* Create skeleton server/client using a grpc example.
* Define simple initial service and messages to initialize NDDI Display.
  * Contructor
* Back in the pixelbridge project, fix costmodel to set headless based on global configuration in pixelbridge main.
* Push latest changes to NDDI (costmodel/headless and splitting of features.h)
* Fix GOMP link errors.
* Fix CL and GL warnings.
* Fix .PRECIOUS make errors.
* Add GL window support to the server so we can start seeing progress.
* Change int to uint for NDDI Interface where appropriate.
* Create a GrpcNddiDisplay for the client to use.
* Add dependencies to Makefile...er...just use cmake.
* Add NDDI Wall Pixel Bridge
* Define additional messages matching the remaining APIs.
  * unsigned int DisplayWidth()
  * unsigned int DisplayHeight()
  * unsigned int NumCoefficientPlanes()
  * void PutPixel(Pixel p, vector<unsigned int> &location)
  * void CopyPixelStrip(Pixel* p, vector<unsigned int> &start, vector<unsigned int> &end)
  * void CopyPixels(Pixel* p, vector<unsigned int> &start, vector<unsigned int> &end)
  * void CopyPixelTiles(vector<Pixel*> &p, vector<vector<unsigned int> > &starts, vector<unsigned int> &size)
  * void FillPixel(Pixel p, vector<unsigned int> &start, vector<unsigned int> &end)
  * void CopyFrameVolume(vector<unsigned int> &start, vector<unsigned int> &end, vector<unsigned int> &dest)
  * void UpdateInputVector(vector<int> &input)
  * void PutCoefficientMatrix(vector< vector<int> > &coefficientMatrix, vector<unsigned int> &location)
  * void FillCoefficientMatrix(vector< vector<int> > &coefficientMatrix, vector<unsigned int> &start, vector<unsigned int> &end)
  * void FillCoefficient(int coefficient, int row, int col, vector<unsigned int> &start, vector<unsigned int> &end)
  * void FillCoefficientTiles(vector<int> &coefficients, vector<vector<unsigned int> > &positions, vector<vector<unsigned int> > &starts, vector<unsigned int> &size)
  * void FillScaler(Scaler scaler, vector<unsigned int> &start, vector<unsigned int> &end)
  * void FillScalerTiles(vector<uint64_t> &scalers, vector<vector<unsigned int> > &starts, vector<unsigned int> &size)
  * void FillScalerTileStack(vector<uint64_t> &scalers, vector<unsigned int> &start, vector<unsigned int> &size)
  * void SetPixelByteSignMode(SignMode mode)
  * void SetFullScaler(uint16_t scaler)
  * uint16_t GetFullScaler()
* Find out if there's a way to memcpy into and out of GRPC request buffers. Look into "bytes" type.
* Add a simple latch
- Look into the rendering artifacts for fb and cache modes.
* Investigate changing vectors to straight arrays throughout the NDDI interface.
  * Then move the biggest arrays to "bytes" in the protobuffers.
- Write a NDDI recorder/player that serializes and parses these new memcpy'able arrays to and from files. Perhaps JSON?
  - Add thread safety to command queue.
  * Move to vectors instead of malloc'd arrays.
  * Implement remaining recorders serializers
  * Add playback.
    * Add input serializers.
    * Add creation and utilization of an NDDI Display.
  * Fix RecorderNddiDisplay bug with NDDI client.
  - Get PixelBridge working with RecorderNddiDisplay.
- Add a proper sync mechanism. 